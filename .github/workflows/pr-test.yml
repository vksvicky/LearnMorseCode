name: Pull Request Tests

on:
  pull_request:
    branches: [ main, develop ]
    types: [opened, synchronize, reopened]

jobs:
  pr-checks:
    name: PR Quality Checks
    runs-on: macos-14

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '15.4'

    - name: Cache Swift Package Manager dependencies
      uses: actions/cache@v4
      with:
        path: .build
        key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }}
        restore-keys: |
          ${{ runner.os }}-spm-

    - name: Cache Xcode DerivedData
      uses: actions/cache@v4
      with:
        path: ~/Library/Developer/Xcode/DerivedData
        key: ${{ runner.os }}-deriveddata-${{ hashFiles('**/*.swift') }}
        restore-keys: |
          ${{ runner.os }}-deriveddata-

    - name: Install dependencies
      run: |
        brew install create-dmg

    - name: Run tests
      run: |
        ./Scripts/build.sh test

    - name: Build and verify
      run: |
        ./Scripts/build.sh debug
        ./Scripts/build.sh diagnose

    - name: Check for breaking changes
      run: |
        echo "Checking for potential breaking changes..."
        
        # Check if Info.plist was modified
        if git diff --name-only HEAD~1 | grep -q "Info.plist"; then
          echo "⚠️  Info.plist was modified - please verify version compatibility"
        fi
        
        # Check if build script was modified
        if git diff --name-only HEAD~1 | grep -q "Scripts/build.sh"; then
          echo "⚠️  Build script was modified - please test thoroughly"
        fi
        
        # Check for new dependencies
        if git diff --name-only HEAD~1 | grep -q "Package.swift"; then
          echo "⚠️  Package.swift was modified - please verify dependencies"
        fi

    - name: Comment PR with results
      uses: actions/github-script@v7
      if: always()
      with:
        script: |
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const botComment = comments.find(comment => 
            comment.user.type === 'Bot' && comment.body.includes('## PR Test Results')
          );
          
          const status = '${{ job.status }}' === 'success' ? '✅' : '❌';
          const emoji = '${{ job.status }}' === 'success' ? '🎉' : '😞';
          
          const body = `## PR Test Results ${emoji}
          
          **Status:** ${status} ${{ job.status === 'success' && 'All checks passed!' || 'Some checks failed.' }}
          
          ### Test Results:
          - **Build:** ${{ job.status === 'success' && '✅ Passed' || '❌ Failed' }}
          - **Tests:** ${{ job.status === 'success' && '✅ Passed' || '❌ Failed' }}
          - **Version Check:** ${{ job.status === 'success' && '✅ Passed' || '❌ Failed' }}
          
          ### Next Steps:
          ${{ job.status === 'success' && 'Ready for review! 🚀' || 'Please fix the issues above and push again.' }}
          
          ---
          *This comment was automatically generated by the CI system.*`;
          
          if (botComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: body
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: body
            });
          }

  compatibility-test:
    name: Compatibility Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-14, macos-15, macos-latest]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: ${{ matrix.os == 'macos-14' && '15.4' || matrix.os == 'macos-15' && '16.0' || '16.2' }}

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: .build
        key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }}
        restore-keys: |
          ${{ runner.os }}-spm-

    - name: Install dependencies
      run: |
        # Install create-dmg for packaging (with timeout)
        timeout 300 brew install create-dmg || echo "create-dmg installation timed out, continuing..."

    - name: Test compatibility
      run: |
        echo "Testing on ${{ matrix.os }}..."
        ./Scripts/build.sh test
        ./Scripts/build.sh debug

    - name: Report compatibility
      if: always()
      run: |
        echo "## Compatibility Test Results for ${{ matrix.os }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Status:** ${{ job.status === 'success' && '✅ Passed' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
        echo "- **OS:** ${{ matrix.os }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
