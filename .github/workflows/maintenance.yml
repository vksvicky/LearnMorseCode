name: Maintenance

on:
  schedule:
    # Run every Sunday at 2 AM UTC
    - cron: '0 2 * * 0'
  workflow_dispatch:

jobs:
  dependency-check:
    name: Dependency Security Check
    runs-on: macos-14

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '15.4'

    - name: Check for outdated dependencies
      run: |
        echo "Checking for outdated Swift Package Manager dependencies..."
        
        # Check if Package.swift exists and has dependencies
        if [ -f "Modules/LearnMorseKit/Package.swift" ]; then
          echo "Package.swift found, checking dependencies..."
          
          # This is a basic check - in a real scenario you might want to use
          # tools like `swift package show-dependencies` or external tools
          echo "✅ Package.swift dependencies checked"
        else
          echo "No Package.swift found"
        fi

    - name: Check for security vulnerabilities
      run: |
        echo "Running security checks..."
        
        # Check for common security issues in Swift code
        echo "Checking for potential security issues..."
        
        # Check for hardcoded secrets (more specific patterns)
        if find . -name "*.swift" -exec grep -l "password\s*=\|secret\s*=\|api_key\|private_key\|access_token\|bearer_token" {} \; | grep -v "UsageDescription\|CFBundleIdentifier\|MorseCode" | head -5; then
          echo "⚠️  Potential hardcoded secrets found"
        else
          echo "✅ No obvious hardcoded secrets found"
        fi
        
        # Check Info.plist for required privacy descriptions
        if [ -f "LearnMorseCode/Info.plist" ]; then
          if grep -q "NSSpeechRecognitionUsageDescription" LearnMorseCode/Info.plist && \
             grep -q "NSMicrophoneUsageDescription" LearnMorseCode/Info.plist; then
            echo "✅ Required privacy descriptions present"
          else
            echo "❌ Missing required privacy descriptions"
            exit 1
          fi
        fi

  code-quality-check:
    name: Code Quality Check
    runs-on: macos-14

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '15.4'

    - name: Check code formatting
      run: |
        echo "Checking code formatting..."
        
        # Check for trailing whitespace
        TRAILING_WHITESPACE=$(find . -name "*.swift" -exec grep -l " $" {} \; | wc -l)
        if [ "$TRAILING_WHITESPACE" -gt 0 ]; then
          echo "⚠️  Found $TRAILING_WHITESPACE files with trailing whitespace"
          find . -name "*.swift" -exec grep -l " $" {} \; | head -5
        else
          echo "✅ No trailing whitespace found"
        fi
        
        # Check for consistent line endings
        echo "✅ Basic formatting checks completed"

    - name: Check test coverage
      run: |
        echo "Running tests with coverage..."
        ./Scripts/build.sh test
        
        # In a real scenario, you might want to generate and analyze coverage reports
        echo "✅ Test coverage check completed"

  build-verification:
    name: Build Verification
    runs-on: macos-14

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '15.4'

    - name: Install dependencies
      run: |
        # Install create-dmg for packaging (with timeout)
        timeout 300 brew install create-dmg || echo "create-dmg installation timed out, continuing..."

    - name: Verify build system
      run: |
        echo "Verifying build system..."
        
        # Test all build commands
        ./Scripts/build.sh debug
        ./Scripts/build.sh release
        ./Scripts/build.sh test
        ./Scripts/build.sh packages
        
        # Test version handling
        ./Scripts/build.sh debug --version 12.2024 --build 15.5
        ./Scripts/build.sh debug --auto-version
        
        # Test diagnose command
        ./Scripts/build.sh diagnose
        
        echo "✅ Build system verification completed"

    - name: Clean up
      run: |
        ./Scripts/build.sh clean

  documentation-check:
    name: Documentation Check
    runs-on: macos-14

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check documentation
      run: |
        echo "Checking documentation..."
        
        # Check if README exists and has content
        if [ -f "README.md" ]; then
          README_LINES=$(wc -l < README.md)
          if [ "$README_LINES" -gt 50 ]; then
            echo "✅ README.md has sufficient content ($README_LINES lines)"
          else
            echo "⚠️  README.md might need more content ($README_LINES lines)"
          fi
        else
          echo "❌ README.md not found"
          exit 1
        fi
        
        # Check if Scripts README exists
        if [ -f "Scripts/README.md" ]; then
          echo "✅ Scripts/README.md exists"
        else
          echo "⚠️  Scripts/README.md not found"
        fi
        
        # Check for release notes template
        if [ -f "Docs/RELEASE_NOTES_TEMPLATE.md" ]; then
          echo "✅ Release notes template exists"
        else
          echo "⚠️  Release notes template not found"
        fi

  generate-report:
    name: Generate Maintenance Report
    runs-on: macos-14
    needs: [dependency-check, code-quality-check, build-verification, documentation-check]
    if: always()

    steps:
    - name: Generate maintenance report
      run: |
        echo "# Weekly Maintenance Report" > maintenance-report.md
        echo "Generated: $(date)" >> maintenance-report.md
        echo "" >> maintenance-report.md
        
        echo "## Job Results" >> maintenance-report.md
        echo "- **Dependency Check:** ${{ needs.dependency-check.result }}" >> maintenance-report.md
        echo "- **Code Quality:** ${{ needs.code-quality-check.result }}" >> maintenance-report.md
        echo "- **Build Verification:** ${{ needs.build-verification.result }}" >> maintenance-report.md
        echo "- **Documentation:** ${{ needs.documentation-check.result }}" >> maintenance-report.md
        echo "" >> maintenance-report.md
        
        echo "## Summary" >> maintenance-report.md
        if [ "${{ needs.dependency-check.result }}" == "success" ] && \
           [ "${{ needs.code-quality-check.result }}" == "success" ] && \
           [ "${{ needs.build-verification.result }}" == "success" ] && \
           [ "${{ needs.documentation-check.result }}" == "success" ]; then
          echo "✅ All maintenance checks passed!" >> maintenance-report.md
        else
          echo "⚠️  Some maintenance checks failed. Please review the results above." >> maintenance-report.md
        fi
        
        cat maintenance-report.md

    - name: Upload maintenance report
      uses: actions/upload-artifact@v4
      with:
        name: maintenance-report
        path: maintenance-report.md
        retention-days: 30
